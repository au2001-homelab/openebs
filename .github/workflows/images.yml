name: Image Push
on:
  push:
    branches:
      - develop
      - 'release/**'
  workflow_call:
    inputs:
      tag:
        description: 'Tag to build, example: v4.2.0'
        required: true
        type: string
      registry:
        description: 'Registry, example: ghcr.io'
        required: true
        type: string
      namespace:
        description: 'Namespace, example: openebs/dev'
        required: true
        type: string

env:
  CI: 1

jobs:
  image-build-push:
    runs-on: oracle-vm-8cpu-32gb-x86-64
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - uses: cachix/install-nix-action@v31.3.0

      - name: Pre-populate nix-shell
        run: |
          export NIX_PATH=nixpkgs=$(jq '.nixpkgs.url' nix/sources.json -r)
          echo "NIX_PATH=$NIX_PATH" >> $GITHUB_ENV
          nix-shell --run "echo" shell.nix

      - name: Login to Docker Hub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the release images
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            nix-shell --pure --run "./scripts/helm/update-version-upon-release.sh"
            nix-shell --run "./scripts/release.sh --tag ${{ inputs.tag }} --registry ${{ inputs.registry }}/${{ inputs.namespace }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TAG=$(nix-shell --run "yq '.appVersion' charts/Chart.yaml")
            nix-shell --run "./scripts/release.sh --tag v${TAG}"
          fi
      # debugging
      # - name: Setup tmate session
      #   if: ${{ failure() }}
      #   timeout-minutes: 120
      #   uses: mxschmitt/action-tmate@v3
